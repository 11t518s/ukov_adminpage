{"ast":null,"code":"module.exports = function SimpleDateTime(props) {\n  return formatDateToReadable(props);\n};\n\nlet formatDateToReadable = props => {\n  let dateSeparator = props.dateSeparator ? props.dateSeparator : ' ';\n  let timeSeparator = props.timeSeparator ? props.timeSeparator : ' ';\n  let dateFormat = props.dateFormat ? props.dateFormat : '';\n  let timeFormat = props.timeFormat ? props.timeFormat : '';\n  ;\n  let showTime = props.showTime ? parseInt(props.showTime) : 1;\n  let showDate = props.showDate ? parseInt(props.showDate) : 1;\n  let meridians = props.meridians ? parseInt(props.meridians) : 0;\n  let DateToFormat = props.children;\n\n  if (!isValidDate(DateToFormat)) {\n    if (!isNaN(DateToFormat)) {\n      DateToFormat = new Date(DateToFormat * 1000);\n\n      if (!DateToFormat) {\n        return \"Invalid Date1\";\n      }\n    } else {\n      DateToFormat = new Date(DateToFormat);\n\n      if (!isValidDate(DateToFormat)) {\n        return \"Invalid Date2\";\n      }\n    }\n  }\n\n  if (!isValidDate(DateToFormat)) {\n    return \"Invalid Date3\";\n  }\n\n  let date = DateToFormat.getDate();\n  let month = DateToFormat.getMonth() + 1;\n  let year = DateToFormat.getFullYear();\n  let hour = DateToFormat.getHours();\n  let minutes = DateToFormat.getMinutes();\n  let seconds = DateToFormat.getSeconds();\n\n  if (showDate && showTime) {\n    return formatDate(date, month, year, dateSeparator, dateFormat) + ' ' + formatTime(hour, minutes, seconds, timeSeparator, timeFormat, meridians);\n  } else if (showDate && !showTime) {\n    return formatDate(date, month, year, dateSeparator, dateFormat);\n  } else if (!showDate && showTime) {\n    return formatTime(hour, minutes, seconds, timeSeparator, timeFormat, meridians);\n  } else {\n    return formatDate(date, month, year, dateSeparator, dateFormat) + ' ' + formatTime(hour, minutes, seconds, timeSeparator, timeFormat, meridians);\n  }\n};\n\nlet formatDate = (date, month, year, dateSeparator, format) => {\n  switch (format) {\n    case 'DMY':\n      return `${date < 10 ? `0${date}` : `${date}`}${dateSeparator}${month < 10 ? `0${month}` : `${month}`}${dateSeparator}${year}`;\n\n    case 'MDY':\n      return `${month < 10 ? `0${month}` : `${month}`}${dateSeparator}${date < 10 ? `0${date}` : `${date}`}${dateSeparator}${year}`;\n\n    case 'MYD':\n      return `${month < 10 ? `0${month}` : `${month}`}${dateSeparator}${year}${dateSeparator}${date < 10 ? `0${date}` : `${date}`}`;\n\n    default:\n      return `${year}${dateSeparator}${month < 10 ? `0${month}` : `${month}`}${dateSeparator}${date < 10 ? `0${date}` : `${date}`}`;\n  }\n};\n\nlet formatTime = (hour, minutes, seconds, timeSeparator, timeFormat, meridians) => {\n  let ampm = 'am';\n\n  if (meridians) {\n    if (hour > 11) ampm = 'pm';\n    if (hour > 12) hour = parseInt(hour % 12);\n  }\n\n  switch (timeFormat) {\n    case 'HMS':\n      return `${hour < 10 ? `0${hour}` : `${hour}`}${timeSeparator}${minutes < 10 ? `0${minutes}` : `${minutes}`}${timeSeparator}${seconds < 10 ? `0${seconds}` : `${seconds}`} ${meridians ? `${ampm}` : ``} `;\n\n    case 'HSM':\n      return `${hour < 10 ? `0${hour}` : `${hour}`}${timeSeparator}${seconds < 10 ? `0${seconds}` : `${seconds}`}${timeSeparator}${minutes < 10 ? `0${minutes}` : `${minutes}`} ${meridians ? `${ampm}` : ``} `;\n\n    case 'MHS':\n      return `${minutes < 10 ? `0${minutes}` : `${minutes}`}${timeSeparator}${hour < 10 ? `0${hour}` : `${hour}`}${timeSeparator}${seconds < 10 ? `0${seconds}` : `${seconds}`} ${meridians ? `${ampm}` : ``}`;\n\n    case 'MSH':\n      return `${minutes < 10 ? `0${minutes}` : `${minutes}`}${timeSeparator}${seconds < 10 ? `0${seconds}` : `${seconds}`}${timeSeparator}${hour < 10 ? `0${hour}` : `${hour}`} ${meridians ? `${ampm}` : ``}`;\n\n    case 'SMH':\n      return `${seconds < 10 ? `0${seconds}` : `${seconds}`}${timeSeparator}${minutes < 10 ? `0${minutes}` : `${minutes}`}${timeSeparator}${hour < 10 ? `0${hour}` : `${hour}`} ${meridians ? `${ampm}` : ``}`;\n\n    case 'SHM':\n      return `${seconds < 10 ? `0${seconds}` : `${seconds}`}${timeSeparator}${hour < 10 ? `0${hour}` : `${hour}`}${timeSeparator}${minutes < 10 ? `0${minutes}` : `${minutes}`} ${meridians ? `${ampm}` : ``}`;\n\n    default:\n      return `${hour < 10 ? `0${hour}` : `${hour}`}${timeSeparator}${minutes < 10 ? `0${minutes}` : `${minutes}`}${timeSeparator}${seconds < 10 ? `0${seconds}` : `${seconds}`} ${meridians ? `${ampm}` : ``}`;\n  }\n};\n\nfunction isValidDate(date) {\n  return date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date);\n}","map":{"version":3,"sources":["/Users/bongsu/Documents/GitHub/ukov_admin/node_modules/react-simple-timestamp-to-date/src/utilities/SimpleDateTime.js"],"names":["module","exports","SimpleDateTime","props","formatDateToReadable","dateSeparator","timeSeparator","dateFormat","timeFormat","showTime","parseInt","showDate","meridians","DateToFormat","children","isValidDate","isNaN","Date","date","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","formatDate","formatTime","format","ampm","Object","prototype","toString","call"],"mappings":"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","sourcesContent":["module.exports = function SimpleDateTime(props){\r\n\r\n        return (formatDateToReadable(props));\r\n}\r\n\r\nlet formatDateToReadable = (props) => {\r\n\r\n    let dateSeparator = props.dateSeparator ? props.dateSeparator : ' ';\r\n    let timeSeparator = props.timeSeparator ? props.timeSeparator : ' ';\r\n    let dateFormat = props.dateFormat ? props.dateFormat : '';\r\n    let timeFormat = props.timeFormat ? props.timeFormat : '';;\r\n    let showTime = props.showTime ? parseInt(props.showTime) : 1;\r\n    let showDate = props.showDate ? parseInt(props.showDate) : 1;\r\n    let meridians = props.meridians ? parseInt(props.meridians) : 0;\r\n    let DateToFormat = props.children;\r\n\r\n    if (!isValidDate(DateToFormat)) {\r\n        if (!isNaN(DateToFormat)) {\r\n            DateToFormat = new Date(DateToFormat * 1000);\r\n            if (!DateToFormat) {\r\n                return \"Invalid Date1\";\r\n            }\r\n        }\r\n        else {\r\n            DateToFormat = new Date(DateToFormat);\r\n            if (!isValidDate(DateToFormat)) {\r\n                return \"Invalid Date2\";\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!isValidDate(DateToFormat)) {\r\n        return \"Invalid Date3\";\r\n    }\r\n\r\n    let date = DateToFormat.getDate();\r\n    let month = DateToFormat.getMonth() + 1;\r\n    let year = DateToFormat.getFullYear();\r\n    let hour = DateToFormat.getHours();\r\n    let minutes = DateToFormat.getMinutes();\r\n    let seconds = DateToFormat.getSeconds();\r\n\r\n    if (showDate && showTime) {\r\n        return formatDate(date, month, year, dateSeparator, dateFormat) + ' ' + formatTime(hour, minutes, seconds, timeSeparator, timeFormat, meridians)\r\n    }\r\n    else if (showDate && !showTime) {\r\n        return formatDate(date, month, year, dateSeparator, dateFormat)\r\n    }\r\n    else if (!showDate && showTime) {\r\n        return formatTime(hour, minutes, seconds, timeSeparator, timeFormat, meridians)\r\n    }\r\n    else {\r\n        return formatDate(date, month, year, dateSeparator, dateFormat) + ' ' + formatTime(hour, minutes, seconds, timeSeparator, timeFormat, meridians)\r\n    }\r\n}\r\n\r\nlet formatDate = (date, month, year, dateSeparator, format) => {\r\n    switch (format) {\r\n        case 'DMY':\r\n            return `${date < 10 ? `0${date}` : `${date}`}${dateSeparator}${month < 10 ? `0${month}` : `${month}`}${dateSeparator}${year}`\r\n        case 'MDY':\r\n            return `${month < 10 ? `0${month}` : `${month}`}${dateSeparator}${date < 10 ? `0${date}` : `${date}`}${dateSeparator}${year}`\r\n        case 'MYD':\r\n            return `${month < 10 ? `0${month}` : `${month}`}${dateSeparator}${year}${dateSeparator}${date < 10 ? `0${date}` : `${date}`}`\r\n        default:\r\n            return `${year}${dateSeparator}${month < 10 ? `0${month}` : `${month}`}${dateSeparator}${date < 10 ? `0${date}` : `${date}`}`\r\n    }\r\n\r\n}\r\nlet formatTime = (hour, minutes, seconds, timeSeparator, timeFormat, meridians) => {\r\n    let ampm = 'am';\r\n    if (meridians) {\r\n        if (hour > 11)\r\n            ampm = 'pm';\r\n        if (hour > 12)\r\n            hour = parseInt(hour % 12)\r\n    }\r\n\r\n    switch (timeFormat) {\r\n        case 'HMS':\r\n            return `${hour < 10 ? `0${hour}` : `${hour}`}${timeSeparator}${minutes < 10 ? `0${minutes}` : `${minutes}`}${timeSeparator}${seconds < 10 ? `0${seconds}` : `${seconds}`} ${meridians ? `${ampm}` : ``} `\r\n        case 'HSM':\r\n            return `${hour < 10 ? `0${hour}` : `${hour}`}${timeSeparator}${seconds < 10 ? `0${seconds}` : `${seconds}`}${timeSeparator}${minutes < 10 ? `0${minutes}` : `${minutes}`} ${meridians ? `${ampm}` : ``} `\r\n        case 'MHS':\r\n            return `${minutes < 10 ? `0${minutes}` : `${minutes}`}${timeSeparator}${hour < 10 ? `0${hour}` : `${hour}`}${timeSeparator}${seconds < 10 ? `0${seconds}` : `${seconds}`} ${meridians ? `${ampm}` : ``}`\r\n        case 'MSH':\r\n            return `${minutes < 10 ? `0${minutes}` : `${minutes}`}${timeSeparator}${seconds < 10 ? `0${seconds}` : `${seconds}`}${timeSeparator}${hour < 10 ? `0${hour}` : `${hour}`} ${meridians ? `${ampm}` : ``}`\r\n        case 'SMH':\r\n            return `${seconds < 10 ? `0${seconds}` : `${seconds}`}${timeSeparator}${minutes < 10 ? `0${minutes}` : `${minutes}`}${timeSeparator}${hour < 10 ? `0${hour}` : `${hour}`} ${meridians ? `${ampm}` : ``}`\r\n        case 'SHM':\r\n            return `${seconds < 10 ? `0${seconds}` : `${seconds}`}${timeSeparator}${hour < 10 ? `0${hour}` : `${hour}`}${timeSeparator}${minutes < 10 ? `0${minutes}` : `${minutes}`} ${meridians ? `${ampm}` : ``}`\r\n        default:\r\n            return `${hour < 10 ? `0${hour}` : `${hour}`}${timeSeparator}${minutes < 10 ? `0${minutes}` : `${minutes}`}${timeSeparator}${seconds < 10 ? `0${seconds}` : `${seconds}`} ${meridians ? `${ampm}` : ``}`\r\n    }\r\n}\r\n\r\nfunction isValidDate(date) {\r\n    return date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date);\r\n}"]},"metadata":{},"sourceType":"script"}